from classifiers import clusterings 
from classifiers import multi_class
from classifiers import binary

# def SVM(trial, trainData, testData, trainLabels, testLabels):
#     mapping = {}
#     for index, element in enumerate(trainLabels):
#         if element not in mapping:
#             mapping[element] = [index]
#         else:
#             mapping[element].append(index)
            
#     for i in mapping.keys():
#         current_training = []
#         for j in mapping[i]:
#             current_training.append(trainData[j])
#         One = OneClassSVM().fit(current_training)
#         it = 0
#         for element3 in One.predict(testData):
#             if element3 == 1:
#                 testLabels[it] = i
            
#             it += 1
#     print(testLabels)

        
#     return adjusted_rand_score(testLabels, trainLabels)            


optimizer_list = {
    "DBSCAN": clusterings.DBSCAN_model,
    "OPTICS": clusterings.OPTICS_model,
    "aglomeret": clusterings.aglomeret_model,
    "kmeans": clusterings.kmeans_model,
    "Spectral": clusterings.SpectralClustering_model,
    "affinity": clusterings.afinitty_propagation_model,
    "MeanShift": clusterings.MeanShift_model,
    "ward_tree": clusterings.ward_tree_model,
    "Birch": clusterings.Birch_model,
    "MiniBatchKMeans": clusterings.MiniBatchKMeans_model,
    "decisionTreeClasifierModel": multi_class.decisionTreeClasifierModel,
    "extraTreeClassifierModel": multi_class.extraTreeClassifierModel,
    "gaussianNBModel": multi_class.gaussianNBModel,
    "labelPropagationModel": multi_class.labelPropagationModel,
    "labelSpreadingModel": multi_class.labelSpreadingModel,
    "linearDiscriminantAnalysisModel": multi_class.linearDiscriminantAnalysisModel,
    "linearSVCModel": multi_class.linearSVCModel,
    "logisticRegressionModel": multi_class.logisticRegressionModel,
    "logisticRegressionCVModel": multi_class.logisticRegressionCVModel,
    "mLPClassifierModel": multi_class.mLPClassifierModel,
    "nearestCentroidModel": multi_class.nearestCentroidModel,
    "quadraticDiscriminantAnalysisModel": multi_class.quadraticDiscriminantAnalysisModel,
    "radiusNeighborsClassifierModel": multi_class.radiusNeighborsClassifierModel,
    "randomForestClassifierModel": multi_class.randomForestClassifierModel,
    "ridgeClassifierModel": multi_class.ridgeClassifierModel,
    "ridgeClassifierCVModel": multi_class.ridgeClassifierCVModel,
    "nuSVCModel": multi_class.nuSVCModel,
    "sVCModel": multi_class.sVCModel,
    "gaussianProcessClassifierModel": multi_class.gaussianProcessClassifierModel,
    "gradientBoostingClassifierModel": multi_class.gradientBoostingClassifierModel,
    "linearSVCModel": multi_class.linearSVCModel,
    "logisticRegressionModel": multi_class.logisticRegressionModel,
    "logisticRegressionCVModel": multi_class.logisticRegressionCVModel,
    "sGDClassifierModel": multi_class.sGDClassifierModel,
    "perceptronModel": multi_class.perceptronModel,
    "passiveAggressiveClassifierModel": multi_class.passiveAggressiveClassifierModel,
    "adaBoostClasifierModel": binary.adaBoostClasifier_model,
    "randomForestClasifierModel": binary.randomForestClasifier_model,
    "gaussianProcessClasifierModel": binary.gaussianProcessClasifier_model,
    "gaussianNBModel": binary.gaussianNB_model,
    "kNeighborsClassifierModel": binary.kNeighborsClassifier_model,
    "mLPClassifierModel": binary.mLPClassifier_model,
    "svcModel": binary.svc_model,
    "decisionTreeClasifierModel": binary.decisionTreeClasifier_model,
    "oneClassSVM": binary.oneClassSVM_model,
    
    
    }
