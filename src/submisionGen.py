
import cfg as cfg
import data_proccessing as dp

from tqdm import tqdm
#import backports.tempfile as tempfile




from sklearn.cluster import SpectralClustering
from sklearn.cluster import AgglomerativeClustering

from sklearn.metrics import silhouette_score
from sklearn.metrics import calinski_harabasz_score
from sklearn.metrics import davies_bouldin_score
import matplotlib.pyplot as plt


def SpectralClustering_model_cal(Data):
    scores = []
    for i in range(2, 30):
        clustering = AgglomerativeClustering(n_clusters=i, linkage='single')
        clustering.fit(Data)
        scores.append(calinski_harabasz_score(Data, clustering.labels_))
    
    plt.plot(range(2, 30), scores)
    plt.xlabel("Number of clusters")
    plt.ylabel("Calinski Harabasz score")
    
    plt.savefig('output_plot_cal.png')


def SpectralClustering_model_dav(Data):
    scores = []
    for i in range(2, 30):
        clustering = AgglomerativeClustering(n_clusters=i, linkage='single')
        clustering.fit(Data)
        scores.append(davies_bouldin_score(Data, clustering.labels_))
    
    plt.plot(range(2, 30), scores)
    plt.xlabel("Number of clusters")
    plt.ylabel("Davies Bouldin score")
    
    plt.savefig('output_plot_dav.png')
    

def SpectralClustering_model_silhouette(Data):
    silhouette_scores = []
    for i in range(2, 30):
        clustering = AgglomerativeClustering(n_clusters=i, linkage='single')
        clustering.fit(Data)
        silhouette_avg = silhouette_score(Data, clustering.labels_)
        silhouette_scores.append(silhouette_avg)
    
    plt.plot(range(2, 30), silhouette_scores)
    plt.xlabel("Number of clusters")
    plt.ylabel("Silhouette score")
    plt.savefig('output_plot_silhouette.png')








def aglomeret_model(Data):
    n_clusters = 22
    linkage = 'single'
    clustering = AgglomerativeClustering(n_clusters=n_clusters, linkage=linkage)
    return clustering.fit(Data).labels_


def SpectralClustering_model(Data):
    n_clusters = 22
    clustering = SpectralClustering(n_clusters=n_clusters)
    return clustering.fit(Data).labels_


def main(model, testing_json):
    # create the embedding:
    # dp.DataProcessing("data.zip", embedding
    data = dp.DataProcessing(testing_json)
    print("Predicting...")
    labels = model(data.dataPoints)
    
    
    with open("output_new" + model.__name__ + ".csv", "w") as f:
        for name, label in zip(data.names, labels):
            f.write(f"{name};{label}\n")


if __name__ == "__main__":
    main(SpectralClustering_model, "pe.json")
