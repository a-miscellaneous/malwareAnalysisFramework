from sklearn.cluster import kmeans_plusplus
from sklearn.cluster import SpectralClustering
from sklearn.cluster import AgglomerativeClustering
from sklearn.cluster import DBSCAN
from sklearn.cluster import OPTICS



from sklearn.metrics.cluster import adjusted_rand_score


def SpectralClustering_model(trial, trainData, testData, trainLabels, testLabels):
    n_clusters= trial.suggest_int('n_clusters', 1, 30)

    
    clustering = SpectralClustering(
                        n_clusters=n_clusters,
                        )
    cluster2 = SpectralClustering(
                        n_clusters=n_clusters,
                        )
    vector = clustering.fit(trainData)
    vector_test = cluster2.fit(testData)
    trial.set_user_attr('score', adjusted_rand_score(vector_test.labels_, testLabels))
    return adjusted_rand_score(vector.labels_, trainLabels)



def DBSCAN_model(trial, trainData, testData, trainLabels, testLabels):
    eps = trial.suggest_float('eps', 0.1, 1.0)
    min_samples = trial.suggest_int('min_samples', 1, 3)
    
    clustering = DBSCAN(eps=eps, min_samples=min_samples)
    cluster2 = DBSCAN(eps=eps, min_samples=min_samples)
    
    vector = clustering.fit(trainData)
    vector_test = cluster2.fit(testData)
    trial.set_user_attr('score', adjusted_rand_score(vector_test.labels_, testLabels))
    return adjusted_rand_score(vector.labels_, trainLabels)

def OPTICS_model(trial, trainData, testData, trainLabels, testLabels):
    min_samples = trial.suggest_int('min_samples', 1, 10)
    max_eps = trial.suggest_float('max_eps', 0.1, 1.0)
    
    clustering = OPTICS(min_samples=min_samples, max_eps=max_eps)
    cluster2 = OPTICS(min_samples=min_samples, max_eps=max_eps)
    
    vector = clustering.fit(trainData)
    vector_test = cluster2.fit(testData)
    trial.set_user_attr('score', adjusted_rand_score(vector_test.labels_, testLabels))
    return adjusted_rand_score(vector.labels_, trainLabels)

def aglomeret_model(trial, trainData, testData, trainLabels, testLabels):
    n_clusters = trial.suggest_int('n_clusters', 1, 20)
    # affinity= trial.suggest_categorical('affinity', ['euclidean', 'l1', 'l2', 'manhattan', 'cosine'])
    linkage= trial.suggest_categorical('linkage', ['ward', 'complete', 'average', 'single'])

    
    clustering = AgglomerativeClustering(n_clusters=n_clusters, linkage=linkage)
    cluster2 = AgglomerativeClustering(n_clusters=n_clusters, linkage=linkage)
    
    vector = clustering.fit(trainData)
    vector_test = cluster2.fit(testData)
    trial.set_user_attr('score', adjusted_rand_score(vector_test.labels_, testLabels))
    return adjusted_rand_score(vector.labels_, trainLabels)

def kmeans_model(trial, trainData, testData, trainLabels, testLabels):
    n_clusters = trial.suggest_int('n_clusters', 1, 10)
    init= trial.suggest_categorical('init', ['k-means++', 'random'])
    n_init= trial.suggest_int('n_init', 1, 10)
    max_iter= trial.suggest_int('max_iter', 1, 100)
    tol= trial.suggest_float('tol', 0.0, 1.0)
    algorithm= trial.suggest_categorical('algorithm', ['auto', 'full', 'elkan'])
    random_state= trial.suggest_int('random_state', 1, 1000)
    
    clustering = kmeans_plusplus(n_clusters=n_clusters, init=init, n_init=n_init, max_iter=max_iter, tol=tol, algorithm=algorithm, random_state=random_state)
    cluster2 = kmeans_plusplus(n_clusters=n_clusters, init=init, n_init=n_init, max_iter=max_iter, tol=tol, algorithm=algorithm, random_state=random_state)
    
    vector = clustering.fit(trainData)
    vector_test = cluster2.fit(testData)
    trial.set_user_attr('score', adjusted_rand_score(vector_test.labels_, testLabels))
    return adjusted_rand_score(vector.labels_, trainLabels)

optimizer_list = {
    "DBSCAN": DBSCAN_model,
    "OPTICS": OPTICS_model,
    "aglomeret": aglomeret_model,
    "kmeans": kmeans_model,
    "Spectral": SpectralClustering_model
}
