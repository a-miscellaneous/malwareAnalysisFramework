
import subprocess
import pefile
import re




class Encoder:
    
    def __init__(self, model):

        self.model = encoders.get(model)()
        self.flip = False
        


    def encode(self, s):
        if not self.flip:
            encoded = self.model.encode(s)
            return encoded if isinstance(encoded, list) else encoded.tolist()
        with open(s, "r") as f:
            return self.model.encode(f.read())
        
        
class docxEmbedder:

    def encode(self, s):
        with open(s, "r") as f:
            # run olevba in terminal
            out = subprocess.run(['olevba', '-t', f.name], stdout= subprocess.PIPE)
            out = out.stdout.decode('utf-8')
            out = out[:out.find(s)]
            out = out[out.rfind('Filename'):]
            out = out[out.find(':')+1:-1]
            out = [0 if x == '-' else 1 for x in out]
            # take only first 8 features
            out = out[:8]
            
            print(out)
            return out
            
class pdfEmbedder:
    analysisPath = r"/home/stud07/02/task2_pdf/peepdf-master/peepdf.py"
    
    def encode(self, s):
        with open(s, "r") as f:
            # run olevba in terminal
            out = subprocess.run(['python', self.analysisPath,  f.name], stdout= subprocess.PIPE)
            out = out.stdout.decode('utf-8')
            print(out)

            objects = re.search(r'Objects: (\d+)', out)
            objects = getInt(objects)
                
            streams = re.search(r'Streams: (\d+)', out)
            streams = getInt(streams)

            uris = re.search(r'URIs: (\d+)', out)
            uris = getInt(uris)

            comments = re.search(r'Comments: (\d+)', out)
            comments = getInt(comments)

            js = re.search(r'Objects with JS code \((\d+)\):', out)
            js = getInt(js)

            if out.find('Suspicious elements:') == -1:
                sus = 0
            else:
                sus = out[out.find('Suspicious elements:') + 20:]
                sus = re.findall(r'\((\d+)\)', sus)
                sus = sum(map(int, sus))
            
            res = [objects, streams, uris, comments, js, sus]
            if res == [0, 0, 0, 0, 0, 0]:
                res = [1, 1, 1, 1, 1, 1]
            # print(out)
            print(res)
            return res
          
          
class peEmbedder:

    
    def encode(self, s):
        #print("encoding")
        try:
            #print(s)
            res = self.analyze(s)
            return res
        except:
            print("Error")
            return 28*[0]
        

    def analyze(self,s):
        # return [1]

        
        pe = pefile.PE(s)
            
        features = {}
        features["DebugSize"] = pe.OPTIONAL_HEADER.DATA_DIRECTORY[6].Size
        features["DebugRVA"] = pe.OPTIONAL_HEADER.DATA_DIRECTORY[6].VirtualAddress
        features["ImageVersion"] = pe.OPTIONAL_HEADER.MajorImageVersion
        features["OSVersion"] = pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
        features["ExportRVA"] = pe.OPTIONAL_HEADER.DATA_DIRECTORY[0].VirtualAddress
        features["ExportSize"] = pe.OPTIONAL_HEADER.DATA_DIRECTORY[0].Size
        features["IATRVA"] = pe.OPTIONAL_HEADER.DATA_DIRECTORY[12].VirtualAddress
        features["ResSize"] = pe.OPTIONAL_HEADER.DATA_DIRECTORY[2].Size
        features["LinkerVersion"] = pe.OPTIONAL_HEADER.MajorLinkerVersion
        features["VirtualSize2"] = pe.sections[1].Misc_VirtualSize
        features["NumberOfSections"] = pe.FILE_HEADER.NumberOfSections
        features["StackReserveSize"] = pe.OPTIONAL_HEADER.SizeOfStackReserve
        features["Dll"] = pe.OPTIONAL_HEADER.DllCharacteristics
        features["SizeOfOptionalHeader"] = pe.FILE_HEADER.SizeOfOptionalHeader
        features["Characteristics"] = pe.FILE_HEADER.Characteristics
        features["SizeOfStackCommit"] = pe.OPTIONAL_HEADER.SizeOfStackCommit
        features["MinorLinkerVersion"] = pe.OPTIONAL_HEADER.MinorLinkerVersion
        features["SizeOfHeapReserve"] = pe.OPTIONAL_HEADER.SizeOfHeapReserve
        features["SizeOfHeaders"] = pe.OPTIONAL_HEADER.SizeOfHeaders
        features["MajorSubsystemVersion"] = pe.OPTIONAL_HEADER.MajorSubsystemVersion
        features["Subsystem"] = pe.OPTIONAL_HEADER.Subsystem
        features["MinorImageVersion"] = pe.OPTIONAL_HEADER.MinorImageVersion
        features["SizeOfHeapCommit"] = pe.OPTIONAL_HEADER.SizeOfHeapCommit
        features["SizeOfImage"] = pe.OPTIONAL_HEADER.SizeOfImage
        features["LoaderFlags"] = pe.OPTIONAL_HEADER.LoaderFlags
        features["NumberOfRvaAndSizes"] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes
        pe.parse_data_directories()
        
        features["importCount"] = 0
        features["methodCount"] = 0
        for entry in pe.DIRECTORY_ENTRY_IMPORT:
          #print (entry.dll)
            features["importCount"] += 1
            for imp in entry.imports:
                #print ('\t', hex(imp.address), imp.name)
                features["methodCount"] += 1
        pe.close()
        return list(features.values())




        
        

        
   
def getInt(matches):
    if matches:
        return int(matches.group(1))
    else:
        return 0
    
    
    
    
encoders = {
    'docx': docxEmbedder,
    'pdf': pdfEmbedder,
    'pe': peEmbedder,
}