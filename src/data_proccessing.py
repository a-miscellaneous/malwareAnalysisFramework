from tqdm import tqdm
import zipfile
import json
import os
import shutil
from src import cfg



class DataProcessing:
    def __init__(self, path, encoding=object):
        self.encoding = encoding
        self.labels = []
        self.dataPoints = []
        self.names = []
        self.tempPath = ""
        self.embeddingsFolder = cfg.training_embeddings if path.endswith(cfg.training_zip) else cfg.testing_embeddings
        self.dataPath = os.path.abspath(path)
        self.dir = os.path.dirname(self.dataPath)

        if path.endswith(".zip"):
            print("Creating JSON file from ZIP...")
            self.createJSON(path)

        elif path.endswith(".json"):
            print("Opening JSON file...")
            self.openJSON(path)

    def createJSON(self, path):
        data = zipfile.ZipFile(path, "r")
        self.createTemp()
        data.extractall(self.tempPath)
        data.close()
        
        
        print("Encoding data...")
        for path, subdirs, files in tqdm(os.walk(self.tempPath)):
            for name in tqdm(files):
                if name.endswith("labels"):
                    continue
                
                file = os.path.join(path, name)
                label = self.getLabel(name)
                dataP = self.encoding(file)
                if dataP is None:
                    continue
                
                self.labels.append(label)
                self.dataPoints.append(dataP)
                self.names.append(name)
            
                    
        self.createdPath = self.saveJSON()
        self.deleteTemp()
        
    def getLabel(self, s):
        res = 'x'
        try:
            res = int(s.split('.')[-1])
        except:
            pass
        return res
        
    def createTemp(self):
        absPath = os.path.join(self.dir, "temp")
        os.mkdir(absPath)
        self.tempPath = absPath
    
    def deleteTemp(self):
        shutil.rmtree(self.tempPath)
            
    def saveJSON(self):
        name = self.encoding.__name__ + ".json"
        p = os.path.join(self.dir, self.embeddingsFolder, name)
        with open(p, "+w") as f:
            f.write(json.dumps(
                {'labels': self.labels, 'data': self.dataPoints, 'names': self.names}))
        return p
            
    def openJSON(self, path):
        with open(path, "r") as f:
            data = json.loads(f.read())
            self.labels = data["labels"]
            self.dataPoints = data["data"]
            self.names = data["names"]


if __name__ == "__main__":
    DataProcessing("data.zip", 'pe')

