############## DO NOT TOUCH THIS ####################
from pathlib import Path
project_root = Path(__file__).resolve().parent.parent
src_path = project_root / 'src'
import sys
sys.path.append(str(project_root))
from src import handler
from src.tryCatchDecor import default_length
####################################################


import pefile
from sklearn.cluster import AgglomerativeClustering

@default_length(28)
def analyzePE(s):
    pe = pefile.PE(s)
        
    features = {}
    features["DebugSize"] = pe.OPTIONAL_HEADER.DATA_DIRECTORY[6].Size
    features["DebugRVA"] = pe.OPTIONAL_HEADER.DATA_DIRECTORY[6].VirtualAddress
    features["ImageVersion"] = pe.OPTIONAL_HEADER.MajorImageVersion
    features["OSVersion"] = pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
    features["ExportRVA"] = pe.OPTIONAL_HEADER.DATA_DIRECTORY[0].VirtualAddress
    features["ExportSize"] = pe.OPTIONAL_HEADER.DATA_DIRECTORY[0].Size
    features["IATRVA"] = pe.OPTIONAL_HEADER.DATA_DIRECTORY[12].VirtualAddress
    features["ResSize"] = pe.OPTIONAL_HEADER.DATA_DIRECTORY[2].Size
    features["LinkerVersion"] = pe.OPTIONAL_HEADER.MajorLinkerVersion
    features["VirtualSize2"] = pe.sections[1].Misc_VirtualSize
    features["NumberOfSections"] = pe.FILE_HEADER.NumberOfSections
    features["StackReserveSize"] = pe.OPTIONAL_HEADER.SizeOfStackReserve
    features["Dll"] = pe.OPTIONAL_HEADER.DllCharacteristics
    features["SizeOfOptionalHeader"] = pe.FILE_HEADER.SizeOfOptionalHeader
    features["Characteristics"] = pe.FILE_HEADER.Characteristics
    features["SizeOfStackCommit"] = pe.OPTIONAL_HEADER.SizeOfStackCommit
    features["MinorLinkerVersion"] = pe.OPTIONAL_HEADER.MinorLinkerVersion
    features["SizeOfHeapReserve"] = pe.OPTIONAL_HEADER.SizeOfHeapReserve
    features["SizeOfHeaders"] = pe.OPTIONAL_HEADER.SizeOfHeaders
    features["MajorSubsystemVersion"] = pe.OPTIONAL_HEADER.MajorSubsystemVersion
    features["Subsystem"] = pe.OPTIONAL_HEADER.Subsystem
    features["MinorImageVersion"] = pe.OPTIONAL_HEADER.MinorImageVersion
    features["SizeOfHeapCommit"] = pe.OPTIONAL_HEADER.SizeOfHeapCommit
    features["SizeOfImage"] = pe.OPTIONAL_HEADER.SizeOfImage
    features["LoaderFlags"] = pe.OPTIONAL_HEADER.LoaderFlags
    features["NumberOfRvaAndSizes"] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes
    pe.parse_data_directories()
    
    features["importCount"] = 0
    features["methodCount"] = 0
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        #print (entry.dll)
        features["importCount"] += 1
        for imp in entry.imports:
            #print ('\t', hex(imp.address), imp.name)
            features["methodCount"] += 1
    pe.close()
    return list(features.values())
    
def aglomeret_model(Data):
    n_clusters = 22
    linkage = 'single'
    clustering = AgglomerativeClustering(n_clusters=n_clusters, linkage=linkage)
    return clustering.fit(Data).labels_



if __name__ == "__main__":
    h = handler.Handler(r'C:\Users\a_misc\Desktop\data\TU_BERLIN\WiSe_23_24\smartlab\malwareAnalysisFramework\example')
    # h.analyzeJSON("pe.json", True)
    h.optimize('analyzePE.json', 'aglomeret', True)
    h.optimize('analyzePE.json', 'aglomeret', False)
    # h.createJSON(True, analyzePE)
    # h.createJSON(False, analyzePE)
    # h.analyzeJSON('analyzePE.json', True)
    # h.generateSolution('analyzePE.json', aglomeret_model)
    h.findBest()
